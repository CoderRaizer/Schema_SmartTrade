CREATE DATABASE CHUNGKHOAN
USE CHUNGKHOAN
GO

SELECT NAME, is_broker_enabled, service_broker_guid FROM sys.databases


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE LENHDAT(
	ID INT IDENTITY(1,1) NOT NULL,
	MACP CHAR(7) NOT NULL,
	NGAYDAT DATETIME NOT NULL DEFAULT GETDATE(),
	LOAIGD NCHAR(1) NOT NULL,
	LOAILENH NCHAR(10) NOT NULL,
	SOLUONG INT NOT NULL,
	GIADAT FLOAT NOT NULL,
	TRANGTHAILENH NVARCHAR(30) NOT NULL,
 CONSTRAINT [PK_LENHDAT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[LENHKHOP]    Script Date: 3/30/2020 10:36:42 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE LENHKHOP(
	IDKHOP INT IDENTITY(1,1) NOT NULL,
	NGAYKHOP DATETIME NOT NULL,
	SOLUONGKHOP INT NOT NULL,
	GIAKHOP FLOAT NOT NULL,
	IDLENHDAT INT NOT NULL,
 CONSTRAINT [PK_LENHKHOP1] PRIMARY KEY CLUSTERED 
(
	[IDKHOP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO


CREATE TABLE BANGGIATRUCTUYEN(
	ID INT PRIMARY KEY IDENTITY,
	MACP CHAR(7),

	GIAMUA1 FLOAT,
	KLM1 INT,
	GIAMUA2 FLOAT,
	KLM2 INT,

	GIAKHOP FLOAT,-- moi nhat
	KHOILUONGKHOP INT,-- moi nhat

	GIABAN1 FLOAT,
	KLB1 INT,
	GIABAN2 FLOAT,
	KLB2 INT

)
GO

--------------------------------------------< INSERT DATA >--------------------------------------------
SET IDENTITY_INSERT [dbo].[LENHDAT] ON 

INSERT [dbo].[LENHDAT] ([ID], [MACP], [NGAYDAT], [LOAIGD], [LOAILENH], [SOLUONG], [GIADAT], [TRANGTHAILENH]) VALUES (2, N'ACB       ', CAST(N'2019-02-02 01:00:00.000' AS DateTime), N'M', N'LO        ', 1000, 10000, N'CK')
INSERT [dbo].[LENHDAT] ([ID], [MACP], [NGAYDAT], [LOAIGD], [LOAILENH], [SOLUONG], [GIADAT], [TRANGTHAILENH]) VALUES (3, N'ACB       ', CAST(N'2019-02-02 01:01:00.000' AS DateTime), N'M', N'LO        ', 1000, 10500, N'CK')
INSERT [dbo].[LENHDAT] ([ID], [MACP], [NGAYDAT], [LOAIGD], [LOAILENH], [SOLUONG], [GIADAT], [TRANGTHAILENH]) VALUES (4, N'ACB       ', CAST(N'2019-02-02 01:01:20.000' AS DateTime), N'M', N'LO        ', 1000, 9500, N'CK')
INSERT [dbo].[LENHDAT] ([ID], [MACP], [NGAYDAT], [LOAIGD], [LOAILENH], [SOLUONG], [GIADAT], [TRANGTHAILENH]) VALUES (5, N'ACB       ', CAST(N'2019-02-02 02:01:00.000' AS DateTime), N'M', N'LO        ', 1000, 11000, N'CK')
INSERT [dbo].[LENHDAT] ([ID], [MACP], [NGAYDAT], [LOAIGD], [LOAILENH], [SOLUONG], [GIADAT], [TRANGTHAILENH]) VALUES (7, N'ACB       ', CAST(N'2019-02-02 00:01:00.000' AS DateTime), N'M', N'LO        ', 1000, 21000, N'CK')
INSERT [dbo].[LENHDAT] ([ID], [MACP], [NGAYDAT], [LOAIGD], [LOAILENH], [SOLUONG], [GIADAT], [TRANGTHAILENH]) VALUES (20, N'ACB       ', CAST(N'2019-03-03 01:00:00.000' AS DateTime), N'B', N'LO        ', 3000, 10000, N'CK')
INSERT [dbo].[LENHDAT] ([ID], [MACP], [NGAYDAT], [LOAIGD], [LOAILENH], [SOLUONG], [GIADAT], [TRANGTHAILENH]) VALUES (21, N'ACB       ', CAST(N'2019-03-03 03:00:00.000' AS DateTime), N'B', N'LO        ', 4000, 12500, N'CK')
INSERT [dbo].[LENHDAT] ([ID], [MACP], [NGAYDAT], [LOAIGD], [LOAILENH], [SOLUONG], [GIADAT], [TRANGTHAILENH]) VALUES (22, N'ACB       ', CAST(N'2019-03-03 02:00:00.000' AS DateTime), N'B', N'LO        ', 1500, 20000, N'CK')
INSERT [dbo].[LENHDAT] ([ID], [MACP], [NGAYDAT], [LOAIGD], [LOAILENH], [SOLUONG], [GIADAT], [TRANGTHAILENH]) VALUES (23, N'ACB       ', CAST(N'2019-02-02 00:00:00.000' AS DateTime), N'B', N'LO        ', 2500, 11000, N'CK')
INSERT [dbo].[LENHDAT] ([ID], [MACP], [NGAYDAT], [LOAIGD], [LOAILENH], [SOLUONG], [GIADAT], [TRANGTHAILENH]) VALUES (26, N'ACB       ', CAST(N'2019-03-03 00:00:00.000' AS DateTime), N'M', N'LO        ', 2000, 8000, N'CK')
SET IDENTITY_INSERT [dbo].[LENHDAT] OFF
ALTER TABLE [dbo].[LENHKHOP]  WITH CHECK ADD  CONSTRAINT [FK_LENHKHOP_LENHDAT] FOREIGN KEY([IDLENHDAT])
REFERENCES [dbo].[LENHDAT] ([ID])
GO
ALTER TABLE [dbo].[LENHKHOP] CHECK CONSTRAINT [FK_LENHKHOP_LENHDAT]
GO



--------------------------------------------< CURSOR >--------------------------------------------
CREATE PROCEDURE [dbo].[CursorLoaiGD]
  @OutCrsr CURSOR VARYING OUTPUT, 
  @macp NVARCHAR( 10), @Ngay datetime,  @LoaiGD CHAR 
AS
SET DATEFORMAT DMY 
IF (@LoaiGD='M') 
  SET @OutCrsr=CURSOR KEYSET FOR 
  SELECT NGAYDAT, SOLUONG, GIADAT,ID FROM LENHDAT 
  WHERE MACP=@macp 
    AND DAY(NGAYDAT)=DAY(@Ngay)AND MONTH(NGAYDAT)= MONTH(@Ngay) AND YEAR(NGAYDAT)=YEAR(@Ngay)  
    AND LOAIGD=@LoaiGD AND SOLUONG >0  
    ORDER BY GIADAT DESC, NGAYDAT 
ELSE
  SET @OutCrsr=CURSOR KEYSET FOR 
  SELECT NGAYDAT, SOLUONG, GIADAT,ID FROM LENHDAT 
  WHERE MACP=@macp 
    AND DAY(NGAYDAT)=DAY(@Ngay)AND MONTH(NGAYDAT)= MONTH(@Ngay) AND YEAR(NGAYDAT)=YEAR(@Ngay)  
    AND LOAIGD=@LoaiGD AND SOLUONG >0  
    ORDER BY GIADAT, NGAYDAT 
OPEN @OutCrsr

GO
/****** Object:  StoredProcedure [dbo].[SP_KHOPLENH_LO]    Script Date: 3/30/2020 10:36:42 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[SP_KHOPLENH_LO]
 @macp NVARCHAR( 10),  @LoaiGD CHAR,
 @soluongMB INT, @giadatMB FLOAT 
AS
SET DATEFORMAT DMY
DECLARE @ngay datetime=getdate()

DECLARE @CrsrVar CURSOR ,@id INT, @ngaydat NVARCHAR(50), @soluong INT, @giadat FLOAT,  @soluongkhop INT, @giakhop FLOAT
	IF (@LoaiGD='B')
		EXEC CursorLoaiGD  @CrsrVar OUTPUT, @macp, @ngay, 'M'
	ELSE 
		EXEC CursorLoaiGD  @CrsrVar OUTPUT, @macp, @ngay, 'B'
  

FETCH NEXT FROM @CrsrVar  INTO @ngaydat , @soluong , @giadat ,@id
SELECT @@FETCH_STATUS
WHILE (@@FETCH_STATUS <> -1 AND @soluongMB >0)
	BEGIN
	 IF  (@LoaiGD='B' )
		IF  (@giadatMB <= @giadat)
		   BEGIN
				IF @soluongMB >= @soluong
					BEGIN
					  SET @soluongkhop = @soluong
					  SET @giakhop = @giadat
					  SET @soluongMB = @soluongMB - @soluong
					  UPDATE dbo.LENHDAT  
						SET SOLUONG = 0,TRANGTHAILENH='KH'
						WHERE CURRENT OF @CrsrVar
					END
				ELSE
					BEGIN
					  SET @soluongkhop = @soluongMB
					  SET @giakhop = @giadat
       
					  UPDATE dbo.LENHDAT  
						SET SOLUONG = SOLUONG - @soluongMB,TRANGTHAILENH='KMP'
						WHERE CURRENT OF @CrsrVar
					  SET @soluongMB = 0
					END
				INSERT INTO LENHKHOP(NGAYKHOP,SOLUONGKHOP,GIAKHOP, IDLENHDAT)
				VALUES(@ngay,@soluongkhop,@giakhop,@id)
				-- support dependency--start
				IF EXISTS (SELECT * FROM BANGGIATRUCTUYEN WHERE MACP=@macp)
					BEGIN
						update BANGGIATRUCTUYEN set GIAKHOP=@giakhop, KHOILUONGKHOP=@soluongkhop where MACP=@macp
					END
				ELSE
					BEGIN
						INSERT INTO BANGGIATRUCTUYEN (MACP,GIAKHOP,KHOILUONGKHOP) VALUES (@macp,@giakhop,@soluongkhop)
				END
				-- support dependency--end
				
				FETCH NEXT FROM @CrsrVar INTO  @ngaydat , @soluong , @giadat, @id
			END
		ELSE
			GOTO THOAT

	ELSE
		IF(@giadatMB >= @giadat)
			BEGIN
				IF @soluongMB >= @soluong
					BEGIN
					  SET @soluongkhop = @soluong
					  SET @giakhop = @giadat
					  SET @soluongMB = @soluongMB - @soluong
					  UPDATE dbo.LENHDAT  
						SET SOLUONG = 0,TRANGTHAILENH='KH'
						WHERE CURRENT OF @CrsrVar
					END
				ELSE
					BEGIN
					  SET @soluongkhop = @soluongMB
					  SET @giakhop = @giadat
       
					  UPDATE dbo.LENHDAT  
						SET SOLUONG = SOLUONG - @soluongMB,TRANGTHAILENH='KMP'
						WHERE CURRENT OF @CrsrVar
					  SET @soluongMB = 0
					END

				INSERT INTO LENHKHOP(NGAYKHOP,SOLUONGKHOP,GIAKHOP, IDLENHDAT)
				VALUES(@ngay,@soluongkhop,@giakhop,@id)
				-- support dependency--start
				IF EXISTS (SELECT * FROM BANGGIATRUCTUYEN WHERE MACP=@macp)
					BEGIN
						update BANGGIATRUCTUYEN set GIAKHOP=@giakhop, KHOILUONGKHOP=@soluongkhop where MACP=@macp
					END
				ELSE
					BEGIN
						INSERT INTO BANGGIATRUCTUYEN (MACP,GIAKHOP,KHOILUONGKHOP) VALUES (@macp,@giakhop,@soluongkhop)
					END
				-- support dependency--end
				FETCH NEXT FROM @CrsrVar INTO  @ngaydat , @soluong , @giadat, @id
			 END
	   ELSE
			GOTO THOAT
	END

THOAT:
IF (@soluongMB > 0)
	BEGIN
		INSERT INTO LENHDAT(MACP,NGAYDAT,LOAIGD,LOAILENH,SOLUONG,GIADAT,TRANGTHAILENH)
		VALUES(@macp,@ngay, @LoaiGD,'LO',@soluongMB,@giadatMB,'CK')
		-- support dependency
		IF NOT EXISTS (SELECT * FROM BANGGIATRUCTUYEN WHERE MACP=@macp)
			BEGIN
				INSERT INTO BANGGIATRUCTUYEN (MACP) VALUES (@macp)
			END
	END
CLOSE @CrsrVar
DEALLOCATE @CrsrVar



------------------------------------- < STORE PROCEDURE ZONE > -------------------------------------
CREATE PROCEDURE SP_FILL_DATA_INTO_BANGGIATRUCTUYEN
AS
BEGIN

	-- First thing todo : Clear all row old data
	DELETE FROM dbo.BANGGIATRUCTUYEN

	DECLARE @ids TABLE (idx INT IDENTITY(1,1), macp CHAR(7))
	INSERT INTO @ids (macp)
	SELECT DISTINCT LD.MACP FROM dbo.LENHDAT AS LD

	DECLARE @i INT,@size INT

	SELECT @i = MIN(idx) - 1, @size = MAX(idx) FROM @ids
	
	PRINT 'QUANTITY ROW MACP : ' + CAST(@size AS VARCHAR(20))

	DECLARE @macp CHAR(7)
	WHILE (@i < @size)
	BEGIN
		SELECT @i = @i + 1
		SELECT @macp = macp FROM @ids WHERE idx = @i
		PRINT 'MACP : ' + @macp
		EXECUTE SP_PUSH_NEW_DATA_INTO_BANGGIATRUCTUYEN @macp
	END
END;

EXEC SP_FILL_DATA_INTO_BANGGIATRUCTUYEN
-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

CREATE PROCEDURE SP_PUSH_NEW_DATA_INTO_BANGGIATRUCTUYEN
@MACP CHAR(7)
AS
BEGIN

	INSERT INTO dbo.BANGGIATRUCTUYEN(MACP,GIAMUA1,KLM1,GIAMUA2,KLM2,GIABAN1,KLB1,GIABAN2,KLB2)
	SELECT TEMP.MACP AS MACP,
	  GIAMUA1 = MAX(CASE WHEN TEMP.RN=1 AND TEMP.LOAIGD LIKE 'M' THEN TEMP.GIADAT ELSE NULL END),
      KLM1    = MAX(CASE WHEN TEMP.RN=1 AND TEMP.LOAIGD LIKE 'M' THEN TEMP.SOLUONG ELSE NULL END),
      GIAMUA2 = MAX(CASE WHEN TEMP.RN=2 AND TEMP.LOAIGD LIKE 'M' THEN TEMP.GIADAT ELSE NULL END),
      KLM2    = MAX(CASE WHEN TEMP.RN=2 AND TEMP.LOAIGD LIKE 'M' THEN TEMP.SOLUONG ELSE NULL END),
	  GIABAN1 = MAX(CASE WHEN TEMP.RN=1 AND TEMP.LOAIGD LIKE 'B' THEN TEMP.GIADAT ELSE NULL END),
      KLB1    = MAX(CASE WHEN TEMP.RN=1 AND TEMP.LOAIGD LIKE 'B' THEN TEMP.SOLUONG ELSE NULL END),
      GIABAN2 = MAX(CASE WHEN TEMP.RN=2 AND TEMP.LOAIGD LIKE 'B' THEN TEMP.GIADAT ELSE NULL END),
      KLB2    = MAX(CASE WHEN TEMP.RN=2 AND TEMP.LOAIGD LIKE 'B' THEN TEMP.SOLUONG ELSE NULL END)
	  FROM 
	   (
	  	  SELECT *
		   FROM (
				SELECT TOP 2 *, RN = ROW_NUMBER() OVER (PARTITION BY MACP, LOAIGD ORDER BY GIADAT DESC)
				FROM dbo.LENHDAT AS LD
				WHERE LD.LOAIGD LIKE 'M' AND LD.MACP LIKE @MACP AND LD.SOLUONG > 0 AND DATEDIFF(DAY,LD.NGAYDAT,GETDATE()) = 0
				ORDER BY LD.GIADAT DESC
				UNION
				SELECT TOP 2 *, RN = ROW_NUMBER() OVER (PARTITION BY MACP, LOAIGD ORDER BY GIADAT ASC)
				FROM dbo.LENHDAT AS LD
				WHERE LD.LOAIGD LIKE 'B' AND LD.MACP LIKE @MACP AND LD.SOLUONG > 0 AND DATEDIFF(DAY,LD.NGAYDAT,GETDATE()) = 0
				ORDER BY LD.GIADAT ASC
		    ) AS X
	   ) AS TEMP
	  GROUP BY TEMP.MACP

END;
EXEC SP_PUSH_NEW_DATA_INTO_BANGGIATRUCTUYEN
-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

CREATE PROC SP_UPDATE_BANGGIATRUCTUYEN
@MACP CHAR(7),
@LOAIGD NCHAR(1),
@GIADAT FLOAT,
@SOLUONG INT
AS
BEGIN
	
	-- MUA
	IF(@LOAIGD = 'M')
	BEGIN
	-- << Begin
		DECLARE @GIA_MUA1 FLOAT
		DECLARE @GIA_MUA2 FLOAT

		SELECT @GIA_MUA1 = BGTT.GIAMUA1 FROM dbo.BANGGIATRUCTUYEN AS BGTT
		SELECT @GIA_MUA2 = BGTT.GIAMUA2 FROM dbo.BANGGIATRUCTUYEN AS BGTT

		-- equal GiaMua1
		IF (@GIADAT = @GIA_MUA1)
		BEGIN
			UPDATE dbo.BANGGIATRUCTUYEN
			SET KLM1 = KLM1 + @SOLUONG WHERE MACP = @MACP
			RETURN
		END
		-- equal GiaMua2
		IF (@GIADAT = @GIA_MUA2)
		BEGIN
			UPDATE dbo.BANGGIATRUCTUYEN
			SET KLM2 = KLM2 + @SOLUONG WHERE MACP = @MACP
			RETURN
		END

		-- bigger GiaMua1
		IF (@GIADAT > @GIA_MUA1 AND @SOLUONG > 0)
		BEGIN
			UPDATE dbo.BANGGIATRUCTUYEN
			SET GIAMUA1 = @GIADAT, KLM1 = @SOLUONG WHERE MACP = @MACP
			RETURN
		END
		-- bigger GiaMua2
		IF (@GIADAT > @GIA_MUA2 AND @GIADAT < @GIA_MUA1 AND @SOLUONG > 0)
		BEGIN
			UPDATE dbo.BANGGIATRUCTUYEN
			SET GIAMUA2 = @GIADAT, KLM2 = @SOLUONG WHERE MACP = @MACP
			RETURN
		END
	-- << End
	END

	-- BAN
	IF(@LOAIGD = 'B')
	BEGIN
	-- << Begin
		DECLARE @GIA_BAN1 FLOAT
		DECLARE @GIA_BAN2 FLOAT

		SELECT @GIA_BAN1 = BGTT.GIABAN1 FROM dbo.BANGGIATRUCTUYEN AS BGTT
		SELECT @GIA_BAN2 = BGTT.GIABAN2 FROM dbo.BANGGIATRUCTUYEN AS BGTT

		-- equal GiaBan1
		IF (@GIADAT = @GIA_BAN1)
		BEGIN
			UPDATE dbo.BANGGIATRUCTUYEN
			SET KLB1 = KLB1 + @SOLUONG WHERE MACP = @MACP
			RETURN
		END
		-- equal GiaBan2
		IF (@GIADAT = @GIA_BAN2)
		BEGIN
			UPDATE dbo.BANGGIATRUCTUYEN
			SET KLB2 = KLB2 + @SOLUONG WHERE MACP = @MACP
			RETURN
		END

		-- smaller GiaBan1
		IF (@GIADAT < @GIA_BAN1 AND @SOLUONG > 0)
		BEGIN
			UPDATE dbo.BANGGIATRUCTUYEN
			SET GIABAN1 = @GIADAT, KLB1 = @SOLUONG WHERE MACP = @MACP
			RETURN
		END
		-- smaller GiaBan2
		IF (@GIADAT < @GIA_BAN2 AND @GIADAT > @GIA_BAN1 AND @SOLUONG > 0)
		BEGIN
			UPDATE dbo.BANGGIATRUCTUYEN
			SET GIABAN2 = @GIADAT, KLB2 = @SOLUONG WHERE MACP = @MACP
			RETURN
		END
	-- << End
	END
END
-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




------------------------------------- < TRIGGER ZONE > -------------------------------------
--------- TRIGGER IN LENHDAT
CREATE TRIGGER TRIGGER_AFTER_INSERT_LENHDAT
ON LENHDAT
AFTER INSERT
AS
	BEGIN --  Begin Trigger
		DECLARE @MACP CHAR(7),@LOAIGD NCHAR(1),@GIADAT FLOAT,@SOLUONG INT

		SET @MACP = (SELECT MACP FROM inserted)
		SET @LOAIGD = (SELECT LOAIGD FROM inserted)
		SET @GIADAT = (SELECT GIADAT FROM inserted)
		SET @SOLUONG = (SELECT SOLUONG FROM inserted)

		-- MACP 'CO' trong table BANGGIATRUCTUYEN
		IF EXISTS (SELECT MACP FROM dbo.BANGGIATRUCTUYEN WHERE MACP = @MACP)
		BEGIN
			EXEC dbo.SP_UPDATE_BANGGIATRUCTUYEN @MACP, @LOAIGD, @GIADAT, @SOLUONG
		END

		-- MACP 'CHUA CO' trong table BANGGIATRUCTUYEN
		ELSE
		BEGIN
			IF (@LOAIGD = 'M')
			BEGIN
				INSERT INTO dbo.BANGGIATRUCTUYEN
						(MACP,GIAMUA1,KLM1) VALUES (@MACP,@GIADAT,@SOLUONG)
			END
			IF (@LOAIGD = 'B')
			BEGIN
				INSERT INTO dbo.BANGGIATRUCTUYEN
						(MACP,GIABAN1,KLB1) VALUES (@MACP,@GIADAT,@SOLUONG)
			END
		END -- End Trigger

	END


--------- TRIGGER IN LENHKHOP
CREATE TRIGGER TRIGGER_AFTER_INSERT_LENHKHOP
ON LENHKHOP
AFTER INSERT
AS
	BEGIN --  Begin Trigger
		DECLARE @SOLUONGKHOP INT, @GIAKHOP FLOAT, @IDLENHDAT INT
		DECLARE @MACP CHAR(7)

		SET @SOLUONGKHOP = (SELECT SOLUONGKHOP FROM inserted)
		SET @GIAKHOP = (SELECT GIAKHOP FROM inserted)
		SET @IDLENHDAT = (SELECT IDLENHDAT FROM inserted)

		SET @MACP = (SELECT LD.MACP FROM dbo.LENHDAT AS LD WHERE LD.ID = @IDLENHDAT)

		UPDATE dbo.BANGGIATRUCTUYEN
		SET GIAKHOP = @GIAKHOP, KHOILUONGKHOP = @SOLUONGKHOP
		WHERE MACP = @MACP
	END -- End Trigger




